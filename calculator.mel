// Function to calculate the sum
global proc float sumNumbers(float $numbers[])
{
    float $result = 0;
    for ($num in $numbers)
    {
        $result += $num;
    }
    return $result;
}

// Function to calculate the subtraction
global proc float subtractNumbers(float $numbers[])
{
    float $result = $numbers[0];
    for ($i = 1; $i < size($numbers); $i++)
    {
        $result -= $numbers[$i];
    }
    return $result;
}

// Function to calculate the multiplication
global proc float multiplyNumbers(float $numbers[])
{
    float $result = 1;
    for ($num in $numbers)
    {
        $result *= $num;
    }
    return $result;
}

// Function to calculate the division
global proc float divideNumbers(float $numbers[])
{
    float $result = $numbers[0];
    for ($i = 1; $i < size($numbers); $i++)
    {
        if ($numbers[$i] == 0)
        {
            error("Division by zero!");
        }
        $result /= $numbers[$i];
    }
    return $result;
}

// Function to calculate power 
global proc float powerNumbers(float $base, float $exponent)
{
    return `pow $base $exponent`;
}

// Function to calculate the mean
global proc float meanNumbers(float $numbers[])
{
    float $sum = sumNumbers($numbers);
    float $result = $sum / size($numbers);
    return $result;
}

// Function to calculate the median
proc float medianNumbers(float $numbers[])
{
    float $sortedNumbers[] = `sort $numbers`;
    int $size = size($sortedNumbers);
    
    if ($size % 2 == 1)
    {
        return $sortedNumbers[$size / 2];
    }
    else
    {
        float $mid1 = $sortedNumbers[($size / 2) - 1];
        float $mid2 = $sortedNumbers[$size / 2];
        return ($mid1 + $mid2) / 2;
    }
}

//Call each function and choose values
float $numbers[] = {5, 2, 1, 10, 12};

float $sum = sumNumbers($numbers);
print ($sum);

float $result = subtractNumbers($numbers);
print ($result);

float $result = multiplyNumbers($numbers);
print ($result);

float $result = divideNumbers($numbers);
print ($result);

float $base = 5;
float $exponent = 2;
float $powerResult = powerNumbers($base, $exponent);
print ($powerResult);

float $result = meanNumbers($numbers);
print ($result);


//

// Main calculator function
global proc float calculator(float $numbers[], string $operation)
{
    float $result;

    // Determine the operation to perform based on the string input
    if ($operation == "add")
    {
        $result = sumNumbers($numbers);
        print("The sum of ");
    }
    else if ($operation == "subtract")
    {
        $result = subtractNumbers($numbers);
        print("The difference of ");
    }
    else if ($operation == "multiply")
    {
        $result = multiplyNumbers($numbers);
        print("The product of ");
    }
    else if ($operation == "divide")
    {
        $result = divideNumbers($numbers);
        print("The quotient of ");
    }
    else if ($operation == "mean")
    {
        $result = meanNumbers($numbers);
        print("The mean of ");
    }
    else if ($operation == "median")
    {
        $result = medianNumbers($numbers);
        print("The median of ");
    }
    else
    {
        error("Invalid operation!");
        return 0;
    }

    // Print the input numbers
    for ($i = 0; $i < size($numbers); $i++)
    {
        if ($i == size($numbers) - 1)
        {
            print($numbers[$i]);
        }
        else
        {
            print($numbers[$i] + ", ");
        }
    }

    // Print the result
    print(" is: " + $result + "\n");

    return $result;
}

float $numbers1[] = {3.0, 5.0, 8.0};
calculator($numbers1, "add");

float $numbers3[] = {10.0, 20.0, 30.0};
calculator($numbers3, "mean");

// Main procedure to create the UI
global proc createCalculatorUI()
{
    // Check if window exists
    if (`window -exists calculatorUI`)
    {
        deleteUI calculatorUI;
    }

    // Create the main window
    window -title "Maya Calculator" -widthHeight 300 150 calculatorUI;
    columnLayout;

    // Input field for numbers
    text -label "Enter numbers (comma-separated):";
    textField -width 250 inputNumbersField;

    // Dropdown menu for operations
    text -label "Select operation:";
    optionMenu -width 250 operationMenu;
    menuItem -label "add";
    menuItem -label "subtract";
    menuItem -label "multiply";
    menuItem -label "divide";
    menuItem -label "mean";
    menuItem -label "median";

    // Button to perform calculation
    button -label "Calculate" -command "performCalculation(\"inputNumbersField\", \"operationMenu\")";

    // Text field to display the result
    text -label "Result:";
    textField -width 250 -editable false calculatorResultField;

    // Show the window
    showWindow;
}

// Procedure to perform the calculation based on user input
global proc performCalculation(string $inputNumbersField, string $operationMenu)
{
    // Read numbers from the input field
    string $inputNumbersStr = `textField -query -text $inputNumbersField`;
    
    // Create an array to hold the tokenized string
    string $numbersStr[] = {};
    
    // Tokenize the comma-separated string into an array of strings
    tokenize($inputNumbersStr, ",", $numbersStr);
    
    // Convert the string array into a float array
    float $numbers[] = {};
    for ($numStr in $numbersStr) {
        // Use catch and eval to convert string to float
        float $num;
        if (!catch(`$num = eval("float(" + $numStr + ")")`)) {
            $numbers[size($numbers)] = $num;
        } else {
            error("Failed to convert string to float: " + $numStr);
        }
    }

    // Get the selected operation from the option menu
    string $operation = `optionMenu -query -value $operationMenu`;

    // Call the calculator function
    float $result = calculator($numbers, $operation);
    
    // Display the result in the result text field
    textField -edit -text (string($result)) "calculatorResultField";
}




// Calculator function to perform arithmetic operations
global proc float calculator(float $numbers[], string $operation)
{
    float $result;

    if ($operation == "add")
    {
        $result = sumNumbers($numbers);
        print("The sum of ");
    }
    else if ($operation == "subtract")
    {
        $result = subtractNumbers($numbers);
        print("The difference of ");
    }
    else if ($operation == "multiply")
    {
        $result = multiplyNumbers($numbers);
        print("The product of ");
    }
    else if ($operation == "divide")
    {
        $result = divideNumbers($numbers);
        print("The quotient of ");
    }
    else if ($operation == "mean")
    {
        $result = meanNumbers($numbers);
        print("The mean of ");
    }
    else if ($operation == "median")
    {
        $result = medianNumbers($numbers);
        print("The median of ");
    }
    else
    {
        error("Invalid operation!");
        return 0;
    }

    // Print the input numbers
    for ($i = 0; $i < size($numbers); $i++)
    {
        if ($i == size($numbers) - 1)
        {
            print($numbers[$i]);
        }
        else
        {
            print($numbers[$i] + ", ");
        }
    }

    // Print the result
    print(" is: " + $result + "\n");

    return $result;
}

// Define arithmetic functions such as sumNumbers, subtractNumbers, etc.
// Example of the sumNumbers function
global proc float sumNumbers(float $numbers[])
{
    float $result = 0;
    for ($num in $numbers)
    {
        $result += $num;
    }
    return $result;
}

// Add similar functions for subtractNumbers, multiplyNumbers, etc.
// Example: subtraction
global proc float subtractNumbers(float $numbers[])
{
    float $result = $numbers[0];
    for ($i = 1; $i < size($numbers); $i++)
    {
        $result -= $numbers[$i];
    }
    return $result;
}

// Function to call the UI
createCalculatorUI();
